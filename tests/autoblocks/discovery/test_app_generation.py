from unittest.mock import MagicMock
from unittest.mock import call
from unittest.mock import patch

import pytest

from autoblocks._impl.prompts.v2.discovery.app_generation import AppGenerator


class TestAppGenerator:
    @pytest.fixture
    def mock_file_utils(self):
        return MagicMock()

    @pytest.fixture
    def app_generator(self, mock_file_utils):
        return AppGenerator(output_dir="/test/output", file_utils=mock_file_utils)

    @pytest.fixture
    def test_prompts(self):
        # Create test prompt objects
        prompt1 = MagicMock()
        prompt1.id = "test-prompt-1"
        prompt1.app_id = "test-app"
        prompt1.app_name = "Test App"

        prompt2 = MagicMock()
        prompt2.id = "test-prompt-2"
        prompt2.app_id = "test-app"
        prompt2.app_name = "Test App"

        return [prompt1, prompt2]

    def test_generate_app_init(self, app_generator, mock_file_utils, test_prompts):
        # Test app __init__.py generation
        app_generator.generate_app_init("Test App", "test-app", test_prompts)

        # Check directory creation
        mock_file_utils.ensure_directory_exists.assert_called_once_with("/test/output/apps/test_app")

        # Check file write
        mock_file_utils.write_to_file.assert_called_once()

        # Inspect the content of the generated file
        file_path, content = mock_file_utils.write_to_file.call_args[0]
        assert file_path == "/test/output/apps/test_app/__init__.py"

        # Check the content includes imports and factory functions
        assert "# Auto-generated prompt module for app: Test App" in content
        assert "from . import prompts" in content
        assert "def test_prompt_1_prompt_manager(" in content
        assert "def test_prompt_2_prompt_manager(" in content
        assert "return prompts.TestPrompt1Factory.create(" in content
        assert "return prompts.TestPrompt2Factory.create(" in content

    @patch("autoblocks._impl.prompts.v2.discovery.app_generation.generate_prompt_implementations")
    def test_generate_app_prompts(self, mock_impl, app_generator, mock_file_utils, test_prompts):
        # Setup mock
        mock_impl.side_effect = ["prompt1_code", "prompt2_code"]
        mock_api_client = MagicMock()

        # Test app prompts.py generation
        app_generator.generate_app_prompts("Test App", "test-app", test_prompts, mock_api_client)

        # Check directory creation
        mock_file_utils.ensure_directory_exists.assert_called_once_with("/test/output/apps/test_app")

        # Check implementation calls
        assert mock_impl.call_count == 2
        mock_impl.assert_has_calls(
            [
                call("test-app", "Test App", test_prompts[0], mock_api_client),
                call("test-app", "Test App", test_prompts[1], mock_api_client),
            ]
        )

        # Check file write
        mock_file_utils.write_to_file.assert_called_once()

        # Inspect the content of the generated file
        file_path, content = mock_file_utils.write_to_file.call_args[0]
        assert file_path == "/test/output/apps/test_app/prompts.py"

        # Check the content includes imports
        assert "from typing import Any" in content
        assert "from typing import Dict" in content
        assert "from autoblocks.prompts.v2.models import FrozenModel" in content
        assert "prompt1_code" in content
        assert "prompt2_code" in content

    def test_create_root_init(self, app_generator, mock_file_utils):
        # Test app list
        apps = [{"app_id": "app1", "app_name": "App One"}, {"app_id": "app2", "app_name": "App Two"}]

        # Test root __init__.py generation
        app_generator.create_root_init(apps)

        # Check directory creation
        mock_file_utils.ensure_directory_exists.assert_called_once_with("/test/output/apps")

        # Check file writes
        assert mock_file_utils.write_to_file.call_count == 2

        # Check apps/__init__.py
        first_call = mock_file_utils.write_to_file.call_args_list[0]
        assert first_call[0][0] == "/test/output/apps/__init__.py"
        assert first_call[0][1] == "# Auto-generated app package\n"

        # Check root __init__.py
        second_call = mock_file_utils.write_to_file.call_args_list[1]
        assert second_call[0][0] == "/test/output/__init__.py"

        # Check content
        root_init_content = second_call[0][1]
        assert "# Auto-generated prompt modules" in root_init_content
        assert "# DO NOT EDIT THIS FILE MANUALLY" in root_init_content
        assert "from .apps import app_one" in root_init_content
        assert "from .apps import app_two" in root_init_content
        assert "app_one = app_one" in root_init_content
        assert "app_two = app_two" in root_init_content
