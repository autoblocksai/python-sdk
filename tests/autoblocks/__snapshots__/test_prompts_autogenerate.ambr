# serializer version: 1
# name: test_write
  '''
  ############################################################################
  # This file was generated automatically by Autoblocks. Do not edit directly.
  ############################################################################
  
  from typing import Any  # noqa: F401
  from typing import Dict  # noqa: F401
  from typing import Union  # noqa: F401
  
  import pydantic  # noqa: F401
  
  from autoblocks.prompts.context import PromptExecutionContext
  from autoblocks.prompts.manager import AutoblocksPromptManager
  from autoblocks.prompts.models import FrozenModel
  from autoblocks.prompts.renderer import TemplateRenderer
  from autoblocks.prompts.renderer import ToolRenderer
  
  
  class PromptAParams(FrozenModel):
      frequency_penalty: Union[float, int] = pydantic.Field(..., alias="frequencyPenalty")
      max_completion_tokens: Union[float, int] = pydantic.Field(..., alias="maxCompletionTokens")
      model: str = pydantic.Field(..., alias="model")
      presence_penalty: Union[float, int] = pydantic.Field(..., alias="presencePenalty")
      temperature: Union[float, int] = pydantic.Field(..., alias="temperature")
      top_p: Union[float, int] = pydantic.Field(..., alias="topP")
      seed: Union[float, int] = pydantic.Field(..., alias="seed")
      response_format: Dict[str, Any] = pydantic.Field(..., alias="responseFormat")
  
  
  class PromptATemplateRenderer(TemplateRenderer):
      __name_mapper__ = {
          "name": "name",
          "name-1": "name_1",
          "name-2": "name_2",
          "weather": "weather",
      }
  
      def template_a(
          self,
          *,
          name: str,
          weather: str,
      ) -> str:
          return self._render(
              "template-a",
              name=name,
              weather=weather,
          )
  
      def template_b(
          self,
          *,
          name_1: str,
          name_2: str,
      ) -> str:
          return self._render(
              "template-b",
              name_1=name_1,
              name_2=name_2,
          )
  
  
  class PromptAToolRenderer(ToolRenderer):
      __name_mapper__ = {}
  
  
  
  class PromptAExecutionContext(
      PromptExecutionContext[
          PromptAParams,
          PromptATemplateRenderer,
          PromptAToolRenderer,
      ],
  ):
      __params_class__ = PromptAParams
      __template_renderer_class__ = PromptATemplateRenderer
      __tool_renderer_class__ = PromptAToolRenderer
  
  
  class PromptAPromptManager(
      AutoblocksPromptManager[PromptAExecutionContext],
  ):
      __prompt_id__ = "prompt-a"
      __prompt_major_version__ = "1"
      __execution_context_class__ = PromptAExecutionContext
  
  
  class PromptBParams(FrozenModel):
      frequency_penalty: Union[float, int] = pydantic.Field(..., alias="frequencyPenalty")
      max_completion_tokens: Union[float, int] = pydantic.Field(..., alias="maxCompletionTokens")
      model: str = pydantic.Field(..., alias="model")
      presence_penalty: Union[float, int] = pydantic.Field(..., alias="presencePenalty")
      temperature: Union[float, int] = pydantic.Field(..., alias="temperature")
      top_p: Union[float, int] = pydantic.Field(..., alias="topP")
      seed: Union[float, int] = pydantic.Field(..., alias="seed")
      response_format: Dict[str, Any] = pydantic.Field(..., alias="responseFormat")
  
  
  class PromptBTemplateRenderer(TemplateRenderer):
      __name_mapper__ = {
          "name": "name",
          "weather": "weather",
      }
  
      def template_a(
          self,
          *,
          name: str,
          weather: str,
      ) -> str:
          return self._render(
              "template-a",
              name=name,
              weather=weather,
          )
  
  
  class PromptBToolRenderer(ToolRenderer):
      __name_mapper__ = {
          "description": "description",
      }
  
      def tool_b(
          self,
          *,
          description: str,
      ) -> Dict[str, Any]:
          return self._render(
              "tool-b",
              description=description,
          )
  
  
  class PromptBExecutionContext(
      PromptExecutionContext[
          PromptBParams,
          PromptBTemplateRenderer,
          PromptBToolRenderer,
      ],
  ):
      __params_class__ = PromptBParams
      __template_renderer_class__ = PromptBTemplateRenderer
      __tool_renderer_class__ = PromptBToolRenderer
  
  
  class PromptBPromptManager(
      AutoblocksPromptManager[PromptBExecutionContext],
  ):
      __prompt_id__ = "prompt-b"
      __prompt_major_version__ = "1"
      __execution_context_class__ = PromptBExecutionContext
  
  
  class PromptCParams(FrozenModel):
      pass
  
  
  class PromptCTemplateRenderer(TemplateRenderer):
      __name_mapper__ = {
          "name": "name",
          "weather": "weather",
      }
  
      def template_a(
          self,
          *,
          name: str,
          weather: str,
      ) -> str:
          return self._render(
              "template-a",
              name=name,
              weather=weather,
          )
  
  
  class PromptCToolRenderer(ToolRenderer):
      __name_mapper__ = {}
  
  
  
  class PromptCExecutionContext(
      PromptExecutionContext[
          PromptCParams,
          PromptCTemplateRenderer,
          PromptCToolRenderer,
      ],
  ):
      __params_class__ = PromptCParams
      __template_renderer_class__ = PromptCTemplateRenderer
      __tool_renderer_class__ = PromptCToolRenderer
  
  
  class PromptCPromptManager(
      AutoblocksPromptManager[PromptCExecutionContext],
  ):
      __prompt_id__ = "prompt-c"
      __prompt_major_version__ = "undeployed"
      __execution_context_class__ = PromptCExecutionContext
  
  
  class PromptDParams(FrozenModel):
      pass
  
  
  class PromptDTemplateRenderer(TemplateRenderer):
      __name_mapper__ = {
          "name": "name",
          "weather": "weather",
      }
  
      def template_a(
          self,
          *,
          name: str,
          weather: str,
      ) -> str:
          return self._render(
              "template-a",
              name=name,
              weather=weather,
          )
  
  
  class PromptDToolRenderer(ToolRenderer):
      __name_mapper__ = {}
  
  
  
  class PromptDExecutionContext(
      PromptExecutionContext[
          PromptDParams,
          PromptDTemplateRenderer,
          PromptDToolRenderer,
      ],
  ):
      __params_class__ = PromptDParams
      __template_renderer_class__ = PromptDTemplateRenderer
      __tool_renderer_class__ = PromptDToolRenderer
  
  
  class PromptDPromptManager(
      AutoblocksPromptManager[PromptDExecutionContext],
  ):
      __prompt_id__ = "prompt-d"
      __prompt_major_version__ = "undeployed"
      __execution_context_class__ = PromptDExecutionContext
  
  '''
# ---
