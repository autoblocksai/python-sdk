name: CI - Vendor

on:
  push:
  schedule:
    # Every day at ~7:17am Chicago time.
    #
    # Using a non-zero minute offset since GitHub Actions suggests
    # running jobs at a random minute to avoid overloading their
    # servers.
    #
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
    - cron: "17 12 * * *"

env:
  POETRY_VERSION: "1.5.1"

  # How many versions of each vendor package to test against
  NUM_LANGCHAIN_VERSIONS: 3

jobs:
  setup:
    runs-on: ubuntu-latest

    outputs:
      langchain-versions: ${{ steps.langchain-versions.outputs.versions }}

    steps:
      - id: langchain-versions
        # Get the most recent versions of langchain from PyPI as a JSON array;
        # this is used in the matrix for the langchain job below.
        run: |
          versions=$(                                      \
            curl -s https://pypi.org/pypi/langchain/json | \
            jq -r '.releases | keys | .[]' |               \
            sort -V |                                      \
            tail -n $NUM_LANGCHAIN_VERSIONS |              \
            jq -ncR '[inputs]'                             \
          )
          echo "versions=$versions" >> $GITHUB_OUTPUT

  langchain:
    needs: setup

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        langchain-version: ${{ fromJson(needs.setup.outputs.langchain-versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version-file: ".python-version"

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: poetry install

      - name: Install latest version of openai
        run: poetry add --group=dev openai

      - name: Install langchain ${{ matrix.langchain-version }}
        run: poetry add --group=dev langchain==${{ matrix.langchain-version }}

      # Required by LLMMathChain
      - name: Install latest version of numexpr
        # Not using poetry here because numexpr requires python 3.9 or above
        # but our package's pyproject supports 3.8. This test is only run on
        # the version in .python-version, though, which will be above 3.8.
        run: poetry run pip install numexpr

      - name: Run tests
        run: poetry run pytest tests/vendor/langchain
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
